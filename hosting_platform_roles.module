<?php

/**
 * Implementation of hook_perm().
 */
function hosting_platform_roles_perm() {
  $perms = array(
    'administer platform uid1/roles');
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function hosting_platform_roles_menu() {
  $items = array();
  $items['node/%hosting_platform_roles_node/roles'] = array(
    'title' => t('Roles'),
    'description' => t('Platform role settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_platform_roles_platform_form', 1),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer platform uid1/roles'),
    'weight' => 1,
  );
  return $items;
}

/**
 * Wildcard loader function to limit the roles tab to just platform nodes
 */
function hosting_platform_roles_node_load($arg) {
  if (!is_numeric($arg)) {
    return FALSE;
  }
  if ($node = node_load($arg)) {
    if (in_array($node->type, array('platform'))) {
      return $arg;
    }
  }
  return FALSE;
}


/**
 * Form where we collect role/uid1 information for profiles/platforms
 *
 * @param $nid
 *   Node ID of the platform
 */
function hosting_platform_roles_platform_form($form_state, $nid) {
  drupal_set_title(t('Role Settings for') . ' ' . node_load($nid)->title);
  $form = array();
  $profiles = hosting_get_profiles($nid);
  $form['intro'] = array(
    '#value' => 'Role settings apply individually to the profiles on a platform. Below, you will find a list of the profiles available on the current platform.',
  );
 
  foreach ($profiles as $package_nid => $profile_name) {
    $form[$profile_name] = array(
      '#type' => 'fieldset',
      '#title' => 'Profile: ' . $profile_name,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form[$profile_name][$package_nid . '_uid1'] = array(
      '#type' => 'textfield',
      '#title' => 'Root (uid1) user',
      '#default_value' => user_load(db_result(db_query('SELECT {uid} FROM {hosting_platform_roles_uid1} WHERE pl_nid=%d AND pr_nid=%d', $nid, $package_nid)))->name,
      '#autocomplete_path' => 'user/autocomplete',
      '#description' => 'Root user (uid1) for sites created with the ' . $profile_name . ' profile.',
    );
    $form[$profile_name][$package_nid . '_role'] = array(
      '#type' => 'textfield',
      '#title' => 'Client user role',
      '#default_value' => db_result(db_query('SELECT {role} FROM {hosting_platform_roles_roles} WHERE pl_nid=%d AND pr_nid=%d', $nid, $package_nid)),
      '#description' => 'Role assigned to client\'s user when creating sites with the ' . $profile_name . ' profile.',
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Validate our form.
 */
function hosting_platform_roles_platform_form_validate($form, &$form_state) {
  $nid = $form['#parameters'][2];
  $profiles = hosting_get_profiles($nid);
  foreach ($profiles as $package_nid => $profile_name) { 
    // ensure that uid1 is a real user
    if (user_load(array('name' => $form_state['values'][$package_nid . '_uid1'])) == 0) {
      form_set_error($package_nid . '_uid1', '<em>' . $form_state['values'][$package_nid . '_uid1'] . '</em>' . t(' is not a valid user.'));
    }
    // Since we don't know what roles are available on a given profile, we can't
    // validate roles at this stage. So we'll validate it prior to using the
    // value in hosting_platform_roles_post_hosting_install_task().
  }
}


/**
 * Implementation of hook_form_submit().
 */
function hosting_platform_roles_platform_form_submit($form, &$form_state) {
  $nid = $form['#parameters'][2];
  $profiles = hosting_get_profiles($nid);

  foreach ($profiles as $package_nid => $profile_name) { 
    // Should we check for changes before updating potentially lots of db records?
    $uid1 = user_load(array('name' => $form_state['values'][$package_nid . '_uid1']))->uid;
    $role = $form_state['values'][$package_nid . '_role']; 
    db_query('DELETE FROM {hosting_platform_roles_uid1} WHERE pl_nid = %d AND pr_nid = %d', $nid, $package_nid);
    db_query('DELETE FROM {hosting_platform_roles_roles} WHERE pl_nid = %d AND pr_nid = %d', $nid, $package_nid);
    if ($uid1 !== '0') {
      db_query('INSERT INTO {hosting_platform_roles_uid1} (pl_nid, pr_nid, uid) VALUES (%d, %d, %d)', $nid, $package_nid, $uid1);
    }
    if ($role !== '') {
      db_query('INSERT INTO {hosting_platform_roles_roles} (pl_nid, pr_nid, role) VALUES (%d, %d, "%s")', $nid, $package_nid, $role);
    }
  }
}
